import { useState } from 'react';
import { Download, Loader2 } from 'lucide-react';
import { exportToPDF, getPreviewContent, generateTitle } from '../lib/pdf-export';
import type { BriefContext } from '../lib/schema';

interface PDFExportButtonProps {
  context: BriefContext;
  venue?: string;
  decisionMaker?: string;
  disabled?: boolean;
}

export function PDFExportButton({
  context,
  venue = 'Investment Committee',
  decisionMaker = 'Board of Trustees',
  disabled = false
}: PDFExportButtonProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [disclaimerAccepted, setDisclaimerAccepted] = useState(false);
  const [showDisclaimer, setShowDisclaimer] = useState(false);

  const handleExport = async () => {
    if (!disclaimerAccepted) {
      setShowDisclaimer(true);
      return;
    }

    setIsExporting(true);

    try {
      const content = getPreviewContent();
      const title = generateTitle(context);

      await exportToPDF({
        title,
        content,
        venue,
        decisionMaker,
        context,
      });

    } catch (error) {
      console.error('PDF export failed:', error);
      alert(error instanceof Error ? error.message : 'PDF export failed. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const acceptDisclaimer = () => {
    setDisclaimerAccepted(true);
    setShowDisclaimer(false);
    handleExport();
  };

  return (
    <>
      <button
        onClick={handleExport}
        disabled={disabled || isExporting}
        className="w-full inline-flex items-center justify-center gap-3 rounded-lg bg-indigo-600 px-6 py-4 text-base font-semibold text-white hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
      >
        {isExporting ? (
          <Loader2 size={20} className="animate-spin" />
        ) : (
          <Download size={20} />
        )}
        {isExporting ? 'Preparing to email your PDF...' : 'Email as PDF'}
      </button>

      {showDisclaimer && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4">
          <div className="max-w-lg rounded-lg bg-white p-8 shadow-xl">
            <h3 className="mb-6 text-xl font-semibold text-gray-900">
              Important Information
            </h3>
            <div className="mb-6 space-y-4 text-base text-gray-700">
              <p>
                This investment brief is generated by Dryvest, a tool from
                Ethical Capital for educational and research purposes.
              </p>
              <p>
                <strong>Important:</strong> This content does not constitute investment advice.
                Please consult with qualified professionals before making investment decisions.
              </p>
              <p>
                By proceeding, you acknowledge that this content is for informational
                purposes only and should not be relied upon for investment decisions.
              </p>
            </div>
            <div className="flex gap-4 justify-end">
              <button
                onClick={() => setShowDisclaimer(false)}
                className="px-6 py-3 text-base font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
              >
                Cancel
              </button>
              <button
                onClick={acceptDisclaimer}
                className="px-6 py-3 text-base font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 transition-colors focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              >
                I Understand, Email PDF
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}